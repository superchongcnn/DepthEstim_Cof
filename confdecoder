class ConfidenceDecoder(nn.Module):
    def __init__(self, num_output_channels=1):
        super(ConfidenceDecoder, self).__init__()
        self.upconv5 = nn.ConvTranspose2d(2048, 1024, kernel_size=3, stride=2, padding=1, output_padding=1)
        self.conv5 = nn.Conv2d(1024, 512, kernel_size=3, padding=1)

        self.upconv4 = nn.ConvTranspose2d(512, 256, kernel_size=3, stride=2, padding=1, output_padding=1)
        self.conv4 = nn.Conv2d(256, 128, kernel_size=3, padding=1)

        self.upconv3 = nn.ConvTranspose2d(128, 64, kernel_size=3, stride=2, padding=1, output_padding=1)
        self.conv3 = nn.Conv2d(64, 64, kernel_size=3, padding=1)

        self.upconv2 = nn.ConvTranspose2d(64, 32, kernel_size=3, stride=2, padding=1, output_padding=1)
        self.conv2 = nn.Conv2d(32, 32, kernel_size=3, padding=1)

        self.upconv1 = nn.ConvTranspose2d(32, 16, kernel_size=3, stride=2, padding=1, output_padding=1)
        self.conv1 = nn.Conv2d(16, num_output_channels, kernel_size=3, padding=1)

    def forward(self, features):
        x5, x4, x3, x2, x1 = features

        x = self.upconv5(x5)
        x = self.conv5(x + x4)

        x = self.upconv4(x)
        x = self.conv4(x + x3)

        x = self.upconv3(x)
        x = self.conv3(x + x2)

        x = self.upconv2(x)
        x = self.conv2(x + x1)

        x = self.upconv1(x)
        confidence = torch.sigmoid(self.conv1(x))  # 使用sigmoid激活函数

        return confidence
