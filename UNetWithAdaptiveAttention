class UNetWithAdaptiveAttention(nn.Module):
    def __init__(self, in_channels, out_channels):
        super(UNetWithAdaptiveAttention, self).__init__()
        
        def CBR(in_channels, out_channels):
            return nn.Sequential(
                nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=1, bias=False),
                nn.BatchNorm2d(out_channels),
                nn.ReLU(inplace=True)
            )
        
        self.enc1 = CBR(in_channels, 64)
        self.enc2 = CBR(64, 128)
        self.enc3 = CBR(128, 256)
        self.enc4 = CBR(256, 512)
        self.pool = nn.MaxPool2d(2)
        
        self.center = CBR(512, 1024)
        
        self.dec4 = CBR(1024, 512)
        self.dec3 = CBR(512, 256)
        self.dec2 = CBR(256, 128)
        self.dec1 = CBR(128, 64)
        
        self.att4 = AdaptiveAttentionBlock(F_g=512, F_l=512)
        self.att3 = AdaptiveAttentionBlock(F_g=256, F_l=256)
        self.att2 = AdaptiveAttentionBlock(F_g=128, F_l=128)
        self.att1 = AdaptiveAttentionBlock(F_g=64, F_l=64)
        
        self.up4 = nn.ConvTranspose2d(1024, 512, kernel_size=2, stride=2)
        self.up3 = nn.ConvTranspose2d(512, 256, kernel_size=2, stride=2)
        self.up2 = nn.ConvTranspose2d(256, 128, kernel_size=2, stride=2)
        self.up1 = nn.ConvTranspose2d(128, 64, kernel_size=2, stride=2)
        
        self.out_conv = nn.Conv2d(64, out_channels, kernel_size=1)
    
    def forward(self, x):
        enc1 = self.enc1(x)
        enc2 = self.enc2(self.pool(enc1))
        enc3 = self.enc3(self.pool(enc2))
        enc4 = self.enc4(self.pool(enc3))
        
        center = self.center(self.pool(enc4))
        
        dec4 = self.up4(center)
        enc4 = self.att4(g=dec4, x=enc4)
        dec4 = self.dec4(torch.cat([dec4, enc4], dim=1))
        
        dec3 = self.up3(dec4)
        enc3 = self.att3(g=dec3, x=enc3)
        dec3 = self.dec3(torch.cat([dec3, enc3], dim=1))
        
        dec2 = self.up2(dec3)
        enc2 = self.att2(g=dec2, x=enc2)
        dec2 = self.dec2(torch.cat([dec2, enc2], dim=1))
        
        dec1 = self.up1(dec2)
        enc1 = self.att1(g=dec1, x=enc1)
        dec1 = self.dec1(torch.cat([dec1, enc1], dim=1))
        
        return self.out_conv(dec1)
