import torch
import torch.nn as nn
import torchvision.models as models

class Encoder(nn.Module):
    def __init__(self):
        super(Encoder, self).__init__()
        resnet = models.resnet50(pretrained=True)
        self.initial = nn.Sequential(*list(resnet.children())[:4])  # 输入的初始卷积层和池化层
        self.layer1 = resnet.layer1  # 第一个残差块
        self.layer2 = resnet.layer2  # 第二个残差块
        self.layer3 = resnet.layer3  # 第三个残差块
        self.layer4 = resnet.layer4  # 第四个残差块

    def forward(self, x):
        x1 = self.initial(x)
        x2 = self.layer1(x1)
        x3 = self.layer2(x2)
        x4 = self.layer3(x3)
        x5 = self.layer4(x4)
        return [x1, x2, x3, x4, x5]
